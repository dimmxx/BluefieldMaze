| 1| 0| 1| 2| 3| 4| 5| 6| 7
| 2| 1| 2|-2| 4|-2|-2| 7| 8
| 3| 2| 3| 4|-2|-1|-3| 8| 9


10123X..
212#4##..
3234#....


Integer[] up = new Integer[3];
        Integer[] down = new Integer[3];
        Integer[] left = new Integer[3];
        Integer[] right = new Integer[3];

        try{
            up[0] = Integer.parseInt(maze[pointY - 1][pointX]);
            up[1] = pointY - 1;
            up[2] = pointX;
        }catch (ArrayIndexOutOfBoundsException e){
        }catch (NumberFormatException e){
        }
        try{
            down[0] = Integer.parseInt(maze[pointY + 1][pointX]);
            down[1] = pointY + 1;
            down[2] = pointX;
        }catch (ArrayIndexOutOfBoundsException e){
        }catch (NumberFormatException e){
        }
        try{
            left[0] = Integer.parseInt(maze[pointY][pointX - 1]);
            left[1] = pointY;
            left[2] = pointX - 1;
        }catch (ArrayIndexOutOfBoundsException e){
        }catch (NumberFormatException e){
        }
        try{
            right[0] = Integer.parseInt(maze[pointY][pointX + 1]);
            right[1] = pointY;
            right[2] = pointX + 1;
        }catch (ArrayIndexOutOfBoundsException e){
        }catch (NumberFormatException e){
        }

        if(up[0] != null && up[0] == 0){
            sb.append("u");
            return;
        }
        if(down[0] != null && down[0] == 0){
            sb.append("d");
            return;
        }
        if(right[0] != null && right[0] == 0){
            sb.append("r");
            return;
        }
        if(left[0] != null && left[0] == 0){
            sb.append("l");
            return;
        }





        if (up[0] !=null) map.put("u", up);
        if (down[0] !=null) map.put("d", down);
        if (right[0] !=null) map.put("r", right);
        if (left[0] !=null) map.put("l", left);

        sb.append(map.firstEntry().getKey());

        findBackPath(map.firstEntry().getValue()[1], map.firstEntry().getValue()[2]);

